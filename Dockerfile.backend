# 后端专用 Dockerfile

# 构建阶段
FROM golang:1.23-bullseye AS builder

WORKDIR /app

# 设置 Go 模块代理为中国镜像
ENV GOPROXY=https://goproxy.cn,direct
ENV GOSUMDB=sum.golang.google.cn

# 更新包列表并安装必要的包
RUN sed -i 's@http://deb.debian.org/debian@https://mirrors.tuna.tsinghua.edu.cn/debian@g' /etc/apt/sources.list \
    && sed -i 's@http://security.debian.org/debian-security@https://mirrors.tuna.tsinghua.edu.cn/debian-security@g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get install -y \
        gcc \
        libc6-dev \
        libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

# 复制 go mod 文件
COPY backend/go.mod backend/go.sum ./

# 下载依赖
RUN go mod download

# 复制后端源码
COPY backend/ ./

# 构建后端应用
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o main .

# 运行时镜像
FROM debian:bullseye-slim

# 安装必要的运行时依赖
RUN sed -i 's@http://deb.debian.org/debian@https://mirrors.tuna.tsinghua.edu.cn/debian@g' /etc/apt/sources.list \
    && sed -i 's@http://security.debian.org/debian-security@https://mirrors.tuna.tsinghua.edu.cn/debian-security@g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get install -y \
        ca-certificates \
        tzdata \
        sqlite3 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 从构建阶段复制文件
COPY --from=builder /app/main .

# 创建数据目录
RUN mkdir -p /app/data

# 设置时区
ENV TZ=Asia/Shanghai

# 暴露端口
EXPOSE 8080

# 设置环境变量
ENV GIN_MODE=release
ENV DB_TYPE=sqlite
ENV DB_PATH=/app/data/host_manager.db

# 启动命令
CMD ["./main"] 